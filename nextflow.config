// List of parameters that can be passed to this workflow
// Docker param
docker {
      enabled=true
      temp='auto'
      runOptions=" -v /home/dulrich/ssd0/fastqs:/fq_input_dir -v /home/dulrich/ssd0:/references -v /home/dulrich/ssd0/GTF:/GTF"
}
process.container="877424950161.dkr.ecr.us-east-1.amazonaws.com/storeon-pipelines"
// Paths
CBMHIVE_PATH = "/restricted/projectnb/cbmhive"
// ref path will be mounted in docker container
REF_PATH = "/references"
SCRIPT_PATH = "${CBMHIVE_PATH}/Nextflow"

// Global parametersm
params.infile_host = "/home/dulrich/ssd0/fastqs/Nextflow_input_BIG.tsv"
params.infile_header = true
// need to read from within the container, assuming in fq_input_dir
params.infile_container = "/fq_input_dir/Nextflow_input_BIG.tsv"
params.output_dir = "/home/dulrich/ssd0/output"
params.prefix = ""

params.read_length = 75
params.paired_end = true
params.stranded = true

// Genomic parameters
// UNCOMMENT ONE OF THE FOLLOWING AND EDIT AS NEEDED ///////////////////////////
//
params.genome = [
   species: "Homo sapiens",
   ucsc: "hg19",
   grc: "GRCh37",
   ensembl: 75
 ]
// 
// params.genome = [
//   species: "Mus musculus",
//   ucsc: "mm10",
//   grc: "GRCm38",
//   ensembl: 92
// ]

// URLs
ENSEMBL_BASE_URL = "ftp://ftp.ensembl.org/pub"

// Module versions
params.modules = [
  fastqc:   "fastqc/0.11.7",
  gatk:     "gatk/3.8-1",
  htslib:   "htslib/1.9",
  java:     "java/10.0.2",
  multiqc:  "multiqc/1.6",
  picard:   "picard/2.18.11",
  python2:  "python2/2.7.16",
  python3:  "python3/3.6.5",
  R:        "R/3.6.0",
  rsem:     "rsem/1.3.1",
  rseqc:    "rseqc/3.0.0",
  samtools: "samtools/1.9",
  star:     "star/2.7.3a"
]

// Database builds
RSEM_PREFIX =
  "${params.genome.species.replaceAll(" ","_")}" +
  "." + "${params.genome.grc}.${params.genome.ensembl}"
params.RSEM = [
  reference: new File(
    "${REF_PATH}/RSEM/ucsc/${params.genome.ucsc}/Ensembl/${RSEM_PREFIX}",
    "base_random/${RSEM_PREFIX}.ucsc.base_random"
  )
]

params.STAR = [
  genomeDir: new File(
    "${REF_PATH}/STAR/${params.modules.star.replace("star/", "")}",
    "ucsc/${params.genome.ucsc}/base_random/"
  ),
  outFilterMultimapNmax: 20,
  limitSjdbInsertNsj: 5000000
]

params.ref_fasta = new File(
  "${REF_PATH}/ucsc/${params.genome.ucsc}/base_random/${params.genome.ucsc}.fa"
)
params.gene_gtf = new File(
  "${REF_PATH}/RSEM/ucsc/${params.genome.ucsc}/Ensembl/${RSEM_PREFIX}",
  "base_random/${RSEM_PREFIX}.ucsc.base_random.gtf"
)
params.gene_bed = new File(
  "${REF_PATH}/RSEM/ucsc/${params.genome.ucsc}/Ensembl/${RSEM_PREFIX}",
  "base_random/${RSEM_PREFIX}.ucsc.base_random.bed"
)

// Attributes for calls to biomaRt in process createSE
// UNCOMMENT BELOW DEPENDING ON SPECIES AND ENSEMBL VERSION ////////////////////

params.createSE = [
  biomart_attributes: [
    gene: [
      "ensembl_gene_id",
      "gene_biotype", "description", "band", "transcript_count",
//    Uncomment only for human /////////////////////////////////////////////////
//      "hgnc_symbol",
//    Uncomment only for mouse /////////////////////////////////////////////////
//      "mgi_symbol",
//    Uncomment only for Ensembl versions <= 75 ////////////////////////////////
//      "external_gene_id", "external_gene_db",
//    Uncomment only for Ensembl versions >= 77 or 'GRCh37' ////////////////////
//      "external_gene_name", "external_gene_source",
//    Uncomment only for Ensembl versions <= 96 ////////////////////////////////
//      "entrezgene"
//    Uncomment only for Ensembl versions >= 97 or 'GRCh37' ////////////////////
//      "entrezgene_id"
    ],
    isoform: [
      "ensembl_transcript_id", "ensembl_gene_id",
      "gene_biotype", "transcript_biotype", "description", "band",
//    Uncomment only for human /////////////////////////////////////////////////
//      "hgnc_symbol",
//    Uncomment only for mouse /////////////////////////////////////////////////
//      "mgi_symbol",
//    Uncomment only for Ensembl versions <= 75 ////////////////////////////////
//      "external_gene_id", "external_gene_db",
//      "external_transcript_id", "transcript_db_name",
//    Uncomment only for Ensembl versions >= 77 or 'GRCh37' ////////////////////
//      "external_gene_name", "external_gene_source",
//      "external_transcript_name", "external_transcript_source_name",
//    Uncomment only for Ensembl versions <= 96 ////////////////////////////////
//      "entrezgene"
//    Uncomment only for Ensembl versions >= 97 or 'GRCh37' ////////////////////
//      "entrezgene_id"
    ]
  ]
]

// Infer project used for SGE cluster from path of input file
//PROJECT = params.output_dir.
//  replaceAll(/^(\/restricted)?\/projectnb\//, "").split("/")[0]
// Default SGE qsub flags
//DEFAULT_QFLAGS = "-V -P ${PROJECT} -l h_rt=24:00:00 -l scratch=10G"

// The default concurrency limit on SCC is 1000 slots
//executor {
//  name = 'sge'
//  queueSize = 1000
//}

/**
process {
  // Cluster parameters across all processes
  // All processes are run in scratch space to reduce load on GPFS
  scratch = true
  // No sense in terminating the entire pipeline if one job crashes
  errorStrategy = 'finish'

  // Cluster parameters specific to each process
  withName: createSE {
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_total=1G"
  }
  withName: runFastQC {
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_total=1G"
  }
  withName: runMultiQCFastq {
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_total=1G"
  }
  withName: runMultiQCSample {
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_total=1G"
  }
  withName: runRSEM {
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_per_core=8G  -pe omp 8"
  }
  withName: runRSeQC_bam_stat {
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_total=125G"
  }
  withName: runRSeQC_clipping_profile {
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_total=125G"
  }
  withName: runRSeQC_deletion_profile {
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_total=125G"
  }
  withName: runRSeQC_geneBody_coverage {
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_total=125G"
  }
  withName: runRSeQC_infer_experiment {
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_total=125G"
  }
  withName: runRSeQC_inner_distance {
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_total=125G"
  }
  withName: runRSeQC_insertion_profile {
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_total=125G"
  }
  withName: runRSeQC_junction_annotation {
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_total=125G"
  }
  withName: runRSeQC_junction_saturation {
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_total=125G"
  }
  withName: runRSeQC_read_distribution {
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_total=125G"
  }
  withName: runRSeQC_read_duplication {
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_total=125G"
  }
  withName: runRSeQC_read_GC {
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_total=125G"
  }
  withName: runRSeQC_read_NVC {
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_total=125G"
  }
  withName: runRSeQC_read_quality {
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_total=125G"
  }
  withName: runRSeQC_tin {
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_total=125G"
  }
  withName: runSTAR1pass {
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_per_core=8G  -pe omp 8"
  }
  withName: runSTAR2pass {
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_per_core=8G  -pe omp 8"
  }
  withName: runSTARgenomeGenerate {
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_per_core=8G  -pe omp 8"
  }
}
**/
